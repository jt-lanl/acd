This code includes both the Gaussian and EC versions of: the basic HACD algorithm, along with chronochrome (CC), and in fact any variant of ACD that can be expressed in the form xi(z)-bx*xi(x)-by*xi(y), where xi(.) is defined in our GRSL paper. For instance, bx=by=1 corresponds to HACD, while bx=1,by=0 is one of the chronochrome variants.  

This package also incorporates LCRA (local co-registration adjustment), as defined in our TGRS paper. And it permits the use of a bad-pixel mask.

Code is also provided for two kinds of tiling: one-pass and two-pass. In one-pass tiling, AnCD is performed on each tile separately.  For two-pass tiling, the first pass collects statistics over the whole image, and based on those statistics, creates an anomalous change detector.  For the second pass, that detector is applied to each tile.

As currently implemented, the tiling code requires that the full image be read into a single numpy array.  This requirement kind of defeats the purpose of tiling, but the idea (for now) is to provide a template.  Once a scheme for reading individual tiles from a file is identified, it can be incorporated into the template.  This scheme should probably be abstracted so that one can separate the file reading from the tile processing, but I didn't want to do that abstraction until I had a good concrete example of how that might work for a real file.  The current code uses HDF5, but a good argument can be made for GeoTIFF.

In the zip file:
 ecqacd.py: core implementation of basic ACD algorithms
 lcra.py: provides utilities for implements LCRA algorithm
 acdtiled.py: combines ecqacd and lcra along with tiling
 anomchange.py: main code that runs ACD with specified options on a specified input file, puts image to screen


Sent separately:
 sample4.h5: an HDF5 file that can be used as input

h5ls sample4.h5 // produces the following output:
imgA                     Dataset {900, 900, 8}
imgB                     Dataset {900, 900, 8}

An example usage would be to run on the command line:

python anomchange.py -i sample4.h5    // simplest case, uses defaults

The output is the minimum and maximum value of the acd (anomalousness) array.  That's not very practical, but it's handy for seeing how that range changes (or, in some cases, hopefully doesn't change) as you change various tiling options.  The whole array is created in anomcahnge.py, so you can mine that for whatever information you need.

There are several command line options, and you can run 

python anomchange.py -h

to get a description of all of them.

For instance, you can run

python anomchange.py -i sample4.h5 --show

and it should pop up a window with an image of the anomalousness array.  If you do use --show, it is handy to clip the values in the array to make anomalousness image more interpretable; eg '--acdclip 50' for this dataset shows a lot of structure.

One of the most observable effects I noticed on this dataset is how the LCRA suppresses a lot of small anomalies; especially small linear features, (apparently) due to small misregistration effects; eg compare

python anomchange.py -i sample4.h5 --show --acdclip 25 -w 0
python anomchange.py -i sample4.h5 --show --acdclip 25 -w 1
python anomchange.py -i sample4.h5 --show --acdclip 25 -w 2

That's a really low clip value, but it really shows off the effect of w>0 (which is the LCRA radius).

For tiling, you can run:

python anomchange.py -i sample4.h5 --tile 2 2  // runs one-pass ACD on each of 4 tiles
python anomchange.py -i sample4.h5 --tile 2 2 --twopass  // runs two-pass ACD on each of 4 tiles
python anomchange.py -i sample4.h5 --tile 1 1 --twopass  // runs two-pass ACD but on the whole image (useful for debugging)

In two-pass mode, you should see that the range of anomalousness is the same, independent of the number of tiles.

You can also get EC algorithms by using nu>2; eg

python anomchange.py -i sample4.h5 --nu 10

Or you can use chronochrome instead of the default HACD

python anomchange.py -i sample4.h5 --beta 0 1

A kind of a hack is the "--mask" option, which creates a mask, a box just up-left of the center; the idea is to have something to test the mask code. In practice of course, the mask would be supplied as a separate image.

python anomchange.py -i sample4.h5 --show --acdclip 25 --mask

For a pixel under mask (ie, a pixel i,j for which mask[i,j]==True), that pixel will not contribute to the estimation of covariance matrices, and the ACD value at that pixel will be set to min(acd); ie, equal to the least anomalous pixel.  A case could be made for setting it to zero or some other fixed value instead.  Another case could be made for going ahead and computing its anomalousness value (ie, mask it out only for the purpose of the covariance matrix computation).

In general, the routine anomchange.py is something that you would, in any operational scenario, replace wholesale with your own interface to your own data.

---

References to GRSL and TGRS papers:

J. Theiler, C. Scovel, B. Wohlberg, and B. R. Foy. "Elliptically contoured distributions for anomalous change detection in hyperspectral imagery." IEEE Geoscience and Remote Sensing Letters 7 (2010) 271-275 doi: 10.1109/LGRS.2009.2032565. 

J. Theiler and B. Wohlberg. "Local Co-Registration Adjustment for Anomalous Change Detection." IEEE Trans. Geoscience and Remote Sensing 50 (2012) 3107-3116. 


